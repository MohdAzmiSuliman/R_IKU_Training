---
title: "Survey Data Self Tutorial"
format: html
---

# surveydata package

https://github.com/andrie/surveydata

## Library

```{r}
pacman::p_load(tidyverse, surveydata)
```

## simple try

create data.frame - tibble also can

```{r}
sdat <- tibble(
   id   = 1:4,
   Q1   = c("Yes", "No", "Yes", "Yes"),
   Q4_1 = c(1, 2, 1, 2), 
   Q4_2 = c(3, 4, 4, 3), 
   Q4_3 = c(5, 5, 6, 6), 
   Q10 = factor(c("Male", "Female", "Female", "Male")),
   crossbreak  = c("A", "A", "B", "B"), 
   weight      = c(0.9, 1.1, 0.8, 1.2)
)

sdat
```

label the dataset

```{r}
varlabels(sdat) <- c(
   "RespID",
   "Question 1", 
   "Question 4: red", "Question 4: green", "Question 4: blue", 
   "Question 10",
   "crossbreak",
   "weight"
)

sdat
```

convert dataset into surveydata format

```{r}
sv <- as.surveydata(sdat, renameVarlabels = TRUE)

sv
```

extract specific question

note: must use ``[]``  symbol

```{r}
sv[, "Q4"]

```

question

```{r}
questions(sv)

which.q(x = sv, Q = "Q1")

which.q(x = sv, Q = "Q4")

question_text(sv, "Q4")

question_text_common(sv, "Q4")

question_text_unique(sv, "Q4")


```


## other

```{r}
sv[, "Q4"] %>% 
  summarytools::descr()
```

# survey package

## library

```{r}
pacman::p_load(survey)
```

## estimate in subpopulation

https://cran.r-project.org/web/packages/survey/vignettes/domain.pdf

```{r}
data(fpc)

fpc

dfpc <- svydesign(id=~psuid,strat=~stratid,weight=~weight,data=fpc,nest=TRUE)

dfpc %>% gtsummary::tbl_svysummary()


svymean(~x, design = dfpc)

dsub <- subset(dfpc, x > 4)

svymean(~x, design = dsub)

svyby(~x, ~I(x > 4), design = dfpc, svymean)

svyglm(x~I(x > 4) + 0, design = dfpc)

svyglm(x~I(x > 4) + 0, design = dfpc) %>% summary()

svyglm(x~I(x > 4) + 0, design = dfpc) %>% broom::tidy()

svyglm(x~I(x > 4) + 0, design = dfpc) %>% jtools::summ()


svyratio(numerator = ~I(x*(x > 4)),
         denominator = ~as.numeric(x > 4), 
         design = dfpc)

```

## subpopulation example 2

```{r}
data(api)

apiclus1$pw

dclus1 <- svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)

dclus1

pop.totals <- c(`(Intercept)` = 6194, stypeH = 755, stypeM = 1018)

pop.totals

gclus1 <- calibrate(dclus1, ~stype + api99, c(pop.totals, api99 = 3914069))

gclus1

svymean(~api00, subset(gclus1, comp.imp == "Yes"))

svyratio(~I(api00*(comp.imp == "Yes")), ~as.numeric(comp.imp == "Yes"), gclus1)
```

# srvyr package

## intro

```{r}
pacman::p_load(survey, tidyverse, srvyr)

data(api)

out <- apistrat %>% 
  mutate(hs_grad_pct = cut(hsg, c(0, 20,100), include.lowest = T, 
                           labels = c("<20%", "\u226520%"))) %>% 
  group_by(stype, hs_grad_pct) %>% 
  summarise(api_diff = weighted.mean(api00 - api99, pw),
            n = n())
out

out %>% 
  ggplot(aes(x = stype, y = api_diff, group = hs_grad_pct, fill = hs_grad_pct)) +
  geom_col(stat = "identity", position = "dodge") +
  geom_text(aes(y = 0, label = n), position = position_dodge(width = .9), 
            vjust = -1)


```


## data prep

```{r}
srs_design_srvyr <- apisrs %>% as_survey_design(ids = 1, fpc = fpc)

srs_design_survey <- svydesign(ids = ~1, fpc = ~fpc, data = apisrs)

srs_design_srvyr2 <- apisrs %>% as_survey(ids = 1, fpc = fpc)
```


```{r}
strat_design_srvyr <- apistrat %>% 
  as_survey_design(1, strata = stype, fpc = fpc, weights = pw, 
                   variables = c(stype, starts_with("api")))

strat_design_survey <- svydesign(ids = ~1, strata = ~stype, fpc = ~fpc, 
                                 variables = ~stype + api99 + api00 + api.stu,
                                 weights = ~pw, data = apistrat)
```

```{r}
strat_design_srvyr <- strat_design_srvyr %>% 
  mutate(api_diff = api00 - api99) %>% 
  rename(api_students = api.stu)

strat_design_survey$variables$api_diff <- 
  strat_design_survey$variables$api00 - strat_design_survey$variables$api99
names(strat_design_survey$variables)[names(strat_design_survey$variables) == "api.stu"] <-
  "api_students"
```

## Summary statistic

```{r}
strat_design_srvyr %>% 
  summarise(api_diff = survey_mean(api_diff, vartype = "ci"))

svymean(~api_diff, strat_design_survey)
```


```{r}
strat_design_srvyr %>% 
  group_by(stype) %>% 
  summarise(api_increase = survey_total(api_diff >= 0),
            api_decrease = survey_total(api_diff < 0))

svyby(~api_diff >= 0, ~stype, strat_design_survey, svytotal)
```


```{r}
srs_design_srvyr %>% 
  group_by(awards) %>% 
  summarise(prop = survey_mean(), 
            total = survey_total())

svymean(~awards, srs_design_survey)
svytotal(~awards, srs_design_survey)
```


```{r}
strat_design_srvyr %>% 
  group_by(stype) %>% 
  summarise(n = unweighted(n()))

svyby(~api99, ~stype, strat_design_survey, unwtd.count)
```


```{r}
strat_design <- apistrat %>% 
  as_survey(strata = stype, fpc = fpc, weight =fpc)

strat_design_out <- strat_design %>% 
  mutate(hs_grad_pct = cut(hsg, c(0, 20,100), include.lowest = T, 
                           labels = c("<20%", "\u226520%"))) %>% 
  group_by(stype, hs_grad_pct) %>% 
  summarise(api_diff = survey_mean(api00 - api99, vartype = "ci"),
            n = unweighted(n()))

strat_design_out

strat_design_out %>% 
  ggplot(aes(x = stype, y = api_diff, group = hs_grad_pct, fill = hs_grad_pct,
             ymax = api_diff_upp, ymin = api_diff_low)) +
  geom_col(stat = "identity", position = "dodge") +
  geom_errorbar(position = position_dodge(width = 0.9), width = 0.1) +
  geom_text(aes(y = 0, label = n), position = position_dodge(width = 0.9), 
            vjust = -1)

```

## stratified

```{r}
strat_design %>%
  group_by(stype, awards) %>%
  summarize(prop = survey_prop())

strat_design %>%
  group_by(interact(stype, awards)) %>% #compare ith above - no interact
  summarize(prop = survey_prop())
```


# UCLA Tutorial

source: https://stats.oarc.ucla.edu/r/seminars/survey-data-analysis-with-r/

## Theory

- survey = rarely use simple random sampling
  - nearly impossible & inefficient financially and statistically
- analysis need to consider the sampling design
  - if ignore the sampling design - point estimate and standard errors likely be calculated incorrectly
  - sampling weight affect point estimate
  - stratification/clustering affect standard error
  - ignore clustering lead to underestimation of standard error (i.e. result will be significant when in fact they are not)
- features of sampling design
  - sampling weight
    - probability weight with one or more adjustment
    - probability weight = inverse probability include in the sample due to sampling design
    - if two stage = probability weight 1st stage times probability weight 2nd stage
    - final weight = inverse of the sampling fraction - incorporate with several other values (e.g. correction for non-response, calibration and trimming)
  - strata
    - each element of the pop must belong to one strata
    - samples taken from each stratum as if it were independent of all of the other strata
    - implication: probability weight for one strata (e.g. urban) will likely be different from the probability weight for another strata (e.g. rural)
    - may need more than one primary sampling unit (PSUs) in each stratum
    - propose: reduce SE of the estimate
  - Primary Sampling Unit (PSU)
    - first unit that is sampled in the design 
      - (e.g. the state in national survey)
      - (e.g. the district in state survey)
    - may not be same sampling method at all level
    - accounting for the clustering in the data (i.e. using the PSUs) will increase the SE
    - ignoring the PSUE lead to false positive
  - Finite Population Correction (FPC)
    - sampling fraction becomes large
      - sampling fraction = number of respondents sampled relative to the population
    - calculation of SE require FPC: if FPC close to 1, little impact and can be safely ignored
  - Replicate weight
    - series of weight variables that used to correct the SE for the sampling plan
    - serve same function as the PSU and strata variables
- sampling with and without replacement
  - most survey stdy collected without replacement
  - once respondent has been selected to be in the sample, that particular respondent cannot be selected again to be in the sample
  
    
# NHANES Tutorial

Source: https://wwwn.cdc.gov/nchs/nhanes/tutorials/default.aspx

## Import data

### example 1

```{r}
pacman::p_load(tidyverse, rio, skimr)

download.file("https://wwwn.cdc.gov/nchs/nhanes/2015-2016/DEMO_I.XPT", 
              tf <- tempfile(), mode="wb")

demo_ds <- import(tf, format = "xpt")

skim(demo_ds)


```

## Example 2

https://wwwn.cdc.gov/nchs/nhanes/tutorials/samplecode.aspx

### Downloading and Importing Data files

prevalence of depression among adults age 20 and over, US 2013-2016
NCHS Data Brief No.303, Figures 1

```{r}
pacman::p_load(tidyverse, survey, rio)

options(survey.lonely.psu = "adjust")
#?survey.lonely.psu
```

display version information

```{r}
cat("R package versions:\n")
for (p in c("base", "survey","dplyr")) {
cat(p, ": ", as.character(packageVersion(p)), "\n")
}

```

data prep

demographic data

```{r}
download.file("https://wwwn.cdc.gov/nchs/nhanes/2013-2014/DEMO_H.XPT", 
              demo_h_tf <- tempfile(), mode="wb")

demo_h <- import(demo_h_tf, format = "xpt") %>% 
  select(SEQN, RIAGENDR, RIDAGEYR, SDMVSTRA, SDMVPSU, WTMEC2YR)

download.file("https://wwwn.cdc.gov/nchs/nhanes/2015-2016/DEMO_I.XPT", 
              demo_i_tf <- tempfile(), mode="wb")

demo_i <- import(demo_i_tf, format = "xpt") %>% 
  select(SEQN, RIAGENDR, RIDAGEYR, SDMVSTRA, SDMVPSU, WTMEC2YR)

```

Mental health - depression screener (DPQ) data

```{r}
download.file("https://wwwn.cdc.gov/nchs/nhanes/2013-2014/DPQ_H.XPT", 
              dpq_h_tf <- tempfile(), mode="wb")

dpq_h <- import(dpq_h_tf, format = "xpt")

download.file("https://wwwn.cdc.gov/nchs/nhanes/2015-2016/DPQ_I.XPT", 
              dpq_i_tf <- tempfile(), mode="wb")

dpq_i <- import(dpq_i_tf, format = "xpt")

```

combine dataset

```{r}
demo_comb <- bind_rows(demo_h, demo_i)

dpq_comb <- bind_rows(dpq_h, dpq_i)

ds_comb <- left_join(demo_comb, dpq_comb, by = "SEQN") %>% 
  mutate(across(.cols = c(DPQ010:DPQ090),
                ~ fauxnaif::na_if_in(., c(7,9))),
         one = 1,
         deprscore = rowSums(pick(DPQ010:DPQ090)),
         # deprscore = rowSums(select(., DPQ010:DPQ090)),
         # other alternative: mutate(deprscore = sum(c_across(DPQ010:DPQ090))) but 
         # require rowwise() and slower
         deprscat = cut(deprscore, breaks = c(-Inf,9,100), labels = c(0,100)),
         deprscat = as.double(as.character(deprscat)),
         # deprscat = if_else(deprscore >= 10, 100, 0),
         gender = factor(RIAGENDR, labels = c("Men", "Women")),
         age_g = cut(RIDAGEYR, breaks = c(-Inf, 19, 39, 59, Inf), 
                     labels = c("Under 20", "20-39", "40-59", "60 and above")),
         WTMEC4YR = WTMEC2YR/2,
         inAnalysis = RIDAGEYR >= 20 & !is.na(deprscore)) %>% 
  select(-starts_with("DPQ"))

ds_comb

```


### using correct sample weight

define survey design

```{r}
nhanes_all <- svydesign(data = ds_comb, id = ~ SDMVPSU, strata = ~ SDMVSTRA, 
                        weights = ~ WTMEC4YR, nest = T)

nhanes_adultval <- subset(nhanes_all, inAnalysis)
```

analysis

### descriptive statistic

create function to call svymean and unweighted count

```{r}
getSummary <- function(varformula, byformula, design){
  c <- svyby(varformula, byformula, design, unwtd.count)
  p <- svyby(varformula, byformula, design, svymean)
  outSum <- left_join(select(c, -se), p)
  outSum
}
```

prevalence of depression

- overall
- by gender
- by age group
- by age and gender


```{r}
getSummary(~deprscat, ~one, nhanes_adultval)
getSummary(~deprscat, ~gender, nhanes_adultval)
getSummary(~deprscat, ~age_g, nhanes_adultval)
getSummary(~deprscat, ~gender+age_g, nhanes_adultval)

```

### Hypothesis testing

compare depression score

```{r}
svyttest(deprscore ~ gender, nhanes_adultval)
svyttest(deprscore ~ gender, subset(nhanes_adultval, age_g == "20-39"))
svyttest(deprscore ~ gender, subset(nhanes_adultval, age_g == "40-59"))
svyttest(deprscore ~ gender, subset(nhanes_adultval, age_g == "60 and above"))

```



pairwise compare depression score

```{r}
svyttest(deprscore ~ age_g, subset(nhanes_adultval, 
                                   age_g == "20-39" | age_g == "40-59"))
svyttest(deprscore ~ age_g, subset(nhanes_adultval, 
                                   age_g == "20-39" | age_g == "60 and above"))
svyttest(deprscore ~ age_g, subset(nhanes_adultval, 
                                   age_g == "40-59" | age_g == "60 and above"))
```

pairwise comparison by age group, among men

```{r}
svyttest(deprscore ~ age_g, subset(nhanes_adultval,  
                                   gender == "Men" & (age_g == "20-39" | age_g == "40-59")))
svyttest(deprscore ~ age_g, subset(nhanes_adultval, 
                                   gender == "Men" & (age_g == "20-39" | age_g == "60 and above")))
svyttest(deprscore ~ age_g, subset(nhanes_adultval, 
                                   gender == "Men" & (age_g == "40-59" | age_g == "60 and above")))
```


### original 


```{r}
library(dplyr)
library(survey)
options(survey.lonely.psu='adjust')

cat("R package versions:\n")
for (p in c("base", "survey","dplyr")) { 
  cat(p, ": ", as.character(packageVersion(p)), "\n")
}

download.file("https://wwwn.cdc.gov/nchs/nhanes/2013-2014/DEMO_H.XPT", tf <- tempfile(), mode="wb")
DEMO_H <- foreign::read.xport(tf)[,c("SEQN","RIAGENDR","RIDAGEYR","SDMVSTRA","SDMVPSU","WTMEC2YR")]
download.file("https://wwwn.cdc.gov/nchs/nhanes/2015-2016/DEMO_I.XPT", tf <- tempfile(), mode="wb")
DEMO_I <- foreign::read.xport(tf)[,c("SEQN","RIAGENDR","RIDAGEYR","SDMVSTRA","SDMVPSU","WTMEC2YR")]
download.file("http://wwwn.cdc.gov/nchs/nhanes/2013-2014/DPQ_H.XPT", tf <- tempfile(), mode="wb")
DPQ_H <- foreign::read.xport(tf)
download.file("http://wwwn.cdc.gov/nchs/nhanes/2015-2016/DPQ_I.XPT", tf <- tempfile(), mode="wb")
DPQ_I <- foreign::read.xport(tf)

DEMO <- bind_rows(DEMO_H, DEMO_I)
DPQ <- bind_rows(DPQ_H, DPQ_I)

One <- left_join(DEMO, DPQ, by="SEQN") %>%
  mutate_at(vars(DPQ010:DPQ090), ~ifelse(. >=7, NA, .)) %>%
  mutate(. , 
         one = 1,
         Depression.Score = rowSums(select(. , DPQ010:DPQ090)),
         Depression= ifelse(Depression.Score >=10, 100, 0), 
         Gender = factor(RIAGENDR, labels=c("Men", "Women")),
         Age.Group = cut(RIDAGEYR, breaks=c(-Inf,19,39,59,Inf),labels=c("Under 20", "20-39","40-59","60 and over")),
         WTMEC4YR = WTMEC2YR/2,
         inAnalysis= (RIDAGEYR >= 20 & !is.na(Depression.Score))
         ) %>% 
  select(., -starts_with("DPQ"))

NHANES_all <- svydesign(data=One, id=~SDMVPSU, strata=~SDMVSTRA, weights=~WTMEC4YR, nest=TRUE)
NHANES <- subset(NHANES_all, inAnalysis)

getSummary <- function(varformula, byformula, design){
  c <- svyby(varformula, byformula, design, unwtd.count) 
  p <- svyby(varformula, byformula, design, svymean) 
  outSum <- left_join(select(c,-se), p) 
  outSum
}

getSummary(~Depression, ~one, NHANES)
getSummary(~Depression, ~Gender, NHANES)
getSummary(~Depression, ~Age.Group, NHANES)
getSummary(~Depression, ~Gender + Age.Group, NHANES)

```


# NHIS tutorial

source: http://asdfree.com/national-health-interview-survey-nhis.html


```{r}
# remotes::install_github("ajdamico/lodown", dependencies = T) 

pacman::p_load(lodown)
```

## download data

may take very long time

```{r}
# lodown("nhis", output_dir = file.path(path.expand("~"), "NHIS"))
```


get catalog

```{r}
nhis_cat <- get_catalog("nhis", output_dir = file.path(path.expand("~"), "NHIS"))
```

download specific year

```{r}
nhis_cat16 <- subset(nhis_cat, year == 2016)

nhis_ds16 <- lodown("nhis", nhis_cat16)

```


## example using survey library

### data prep

```{r}
options(survey.lonely.psu = "adjust")

pacman::p_load(tidyverse, survey, mitools, rio)

nhis_personsx_df <- import(file.path(path.expand("~"), "NHIS", "2016/personsx.rds")) %>% 
  as_tibble()
head(nhis_personsx_df)

nhis_income_list <- import(file.path(path.expand("~"), "NHIS", "2016/incmimp.rds")) %>% 
  map(., as_tibble)
head(nhis_income_list)

merge_variables <- c("hhx", "fmx", "fpx")

nhis_personsx_df[merge_variables] <- 
    sapply(nhis_personsx_df[merge_variables], as.numeric)

inc_vars_to_keep <- c(merge_variables, 
                      setdiff(names(nhis_income_list[[1]]), 
                              names(nhis_personsx_df)))

vars_to_keep <- c(merge_variables, "ppsu", "pstrat", "wtfa", 'phstat', 
                  'sex', 'hospno', 'age_p', 'hinotmyr', 'notcov')

nhis_personsx_df <- nhis_personsx_df[vars_to_keep]

nhis_personsx_list <- lapply(nhis_income_list, function(w){ 
  w <- w[inc_vars_to_keep]
  w[merge_variables] <- sapply(w[merge_variables], as.numeric)
  result <- merge(nhis_personsx_df, w)
  stopifnot(nrow(result) == nrow(nhis_personsx_df))
  result
  })

```

### survey design

```{r}
nhis_design <- svydesign(id = ~ppsu, strata =  ~pstrat, nest = T,
                         weights = ~wtfa, data = imputationList(nhis_personsx_list))
```

### Add new column

```{r}
nhis_design <- update(nhis_design, one = 1, 
                      poverty_category = factor(findInterval(povrati3, 1:4),
                                                labels = c("below poverty", 
                                                           "100-199%", "200-299%", 
                                                           "300-399%" , "400%+")),
                      fair_or_poor_reported_health = 
                        ifelse(phstat %in% 1:5, as.numeric(phstat >= 4), NA),
                      sex = factor(sex, labels = c("male", "female")),
                      hospno = ifelse(hospno > 366, NA, hospno))
```

### Unweighted Count

```{r}
MIcombine(with(nhis_design, svyby(~one, ~one, unwtd.count)))

MIcombine(with(nhis_design, svyby(~one, ~poverty_category, unwtd.count)))

```

### Weighted Count

```{r}
MIcombine(with(nhis_design, svytotal(~one)))

MIcombine(with(nhis_design, svyby(~one, ~poverty_category, svytotal)))

```

### Descriptive Statistic

```{r}
MIcombine(with(nhis_design, svymean(~age_p)))
MIcombine(with(nhis_design, svyby(~age_p, ~poverty_category, svymean)))

MIcombine(with(nhis_design, svymean(~sex)))
MIcombine(with(nhis_design, svyby(~sex, ~poverty_category, svymean)))

MIcombine(with(nhis_design, svytotal(~age_p)))
MIcombine(with(nhis_design, svyby(~age_p, ~poverty_category, svytotal)))

MIcombine(with(nhis_design, 
               svyratio(numerator = ~hinotmyr, denominator = ~hospno, na.rm = TRUE)))

```

### regression models and test of assoication

```{r}
lodown::MIsvyttest(age_p ~ fair_or_poor_reported_health, nhis_design)

lodown::MIsvychisq(~fair_or_poor_reported_health + sex , nhis_design)

MIcombine(with(nhis_design, svyglm(age_p ~ fair_or_poor_reported_health + sex))) %>% 
  summary()

```

