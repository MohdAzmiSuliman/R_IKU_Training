---
title: "Statistical Tests in R: Univariable (Numerical)"
subtitle: "Kursus R: Pengenalan dan Praktikal (Sesi 2)"
format: 
  clean-revealjs: 
    slide-number: true
    lightbox: true
    auto-stretch: false
    footer: "Univariable Analysis: Numerical Data"
author:
  - name: Mohd Azmi Bin Suliman
    orcid: 0000-0002-2125-3811
    email: azmi.suliman@moh.gov.my
    affiliations: Pusat Penyelidikan Penyakit Tak Berjangkit, Institut Kesihatan Umum
date: 2024-03-06
date-format: "dddd, DD MMMM YYYY"
embed-resources: true
execute: 
  echo: true
---

# Univariate Analysis of Numerical Data

```{r}
#| label: setup
#| echo: false

pacman::p_load(tidyverse, haven, gtsummary)
asthmads_clean <- read_sav("asthmads_clean.sav") %>% 
  as_factor()
```

```{css}
#| echo: false

code.sourceCode {
  font-size: 1.2em;
}
```

## Univariate Analysis of Numerical Data

::::{.columns}

:::{.column width="48%"}

-   Parametric tests
    -   Independent t-test
    -   Paired t-test
    -   Analysis of Variance (ANOVA)
    -   Pearson's Correlation

:::

:::{.column width="4%"}

:::

:::{.column width="48%"}

-   Non-parametric tests
    -   Mann-Whitney U Test
    -   Wilcoxon Signed-Rank Test
    -   Kruskal-Wallis Test
    -   Spearman's Correlation

:::

::::


# Independent t-test

## Independent t-test

-   Used to compare the means of two independent groups.
-   Assumptions:
    -   The samples was taken **randomly** from the population.
    -   The independent variable consists of two categorical, **independent** groups.
    -   The dependent variable is **continuous**.
    -   The dependent variable should be **approximately normally distributed**.
    -   *The two groups should have approximately equal variances*.

## Student's t-test or Welch's t-test?

-   Independent t-test == Student's t-test
-   But!
    -   Need to test for equal variance assumptions
    -   In reality, the variances are not always equal
-   A movement now strongly suggests using Welch's t-test as default.

:::{.notes}

commonly when talking about independent t-test, people will always think/mean about student t-test.

:::

## 

[![Declare, M. et al (2017), International Review of Social Psychology](images/welch_default.png)](https://doi.org/10.5334/irsp.82){width="70%"}

## Practical: Independent t-test

-   Let's try to perform an Independent t-test
-   E.g., compare the mean of height between gender

```{r}
t.test(Ht_m ~ Gender, asthmads_clean)
```

## Practical: Independent t-test with `gtsummary`

-   Similarly, we can use the `add_p` function from the `gtsummary` package to perform the test.
-   However, by default, the test is the Wilcoxon Rank Sum Test (Mann-Whitney U Test)

```{r}
asthmads_clean %>% 
  tbl_summary(by = Gender, 
              include = Ht_m) %>%
  add_p()
```

## Practical: Independent t-test with `gtsummary`

-   Similarly, we can use the `add_p` function from the `gtsummary` package to perform the test.
-   We need to specify our test

```{r}
#| code-line-numbers: "5"

asthmads_clean %>% 
  tbl_summary(by = Gender, 
              include = Ht_m, 
              statistic = list(all_continuous() ~ "{mean} ({sd})")) %>%
  add_p(test = list(all_continuous() ~ "t.test"))
```

## Practical: Independent t-test with `gtsummary`

-   Similarly, we can use the `add_p` function from the `gtsummary` package to perform the test.
-   If we want to add differences, change the `add_p` function to the `add_difference` function.

```{r}
#| code-line-numbers: "5"

asthmads_clean %>% 
  tbl_summary(by = Gender, 
              include = Ht_m, 
              statistic = list(all_continuous() ~ "{mean} ({sd})")) %>%
  add_difference(test = list(all_continuous() ~ "t.test"))
```

#  {background-image="images/intermission.png"}

## R Syntax Convention for Formula

-   Some statistical test functions in R accept input with x and y values
-   e.g., Pearson's Chi-Square Test

```{r}
#| eval: false

with(asthmads_clean, table(Gender, WorkStatus)) %>% 
  chisq.test(correct = F)

?chi.test
```

## 

![](images/chisq_help.png)

## R Syntax Convention for Formula

-   Some statistical test functions in R accept input with a formula
-   e.g., Independent t-test

```{r}
#| eval: false

t.test(Ht_m ~ Gender, asthmads_clean)

?t.test
```

## 

![](images/ttest_help.png)

## R Syntax Convention for Formula

-   For a test (or function) that accepts a formula as input, the formula is written as:
    -   `dependent_variable ~ independent_variable, data = dataset`
    -   `y ~ x, data = dataset`
    -   `outcome ~ grouping, data = dataset`

# Continue

# Paired t-test

## Paired t-test

-   Used to compare the means of two related groups.
-   Assumptions:
    -   The samples was taken **randomly** from the population.
    -   The dependent variable is **continuous**.
    -   The **difference** between the two groups should be **approximately normally distributed**.

## Practical: Paired t-test

```{r}
t.test(Pair(Weight_Post, Weight_Pre) ~ 1, asthmads_clean)
```

-   alternatively

```{r}
#| eval: false

with(asthmads_clean, t.test(Weight_Post, Weight_Pre, paired = T))

t.test(asthmads_clean$Weight_Post, asthmads_clean$Weight_Pre, paired = T)
```

## Demo: Paired t-test with `gtsummary`

**Demonstration only**

-   Similarly, we can use the `add_p` function from the `gtsummary` package to perform the test.
-   However, the data need to be reshaped first.
    -   We will learn about reshaping data in the next session.

## Demo: Paired t-test with `gtsummary`

**Demonstration only**

-   This is the original dataset

```{r}
asthmads_clean %>% 
  select(id, Weight_Post, Weight_Pre) 
```

## Demo: Paired t-test with `gtsummary`

**Demonstration only**

::: columns
::: {.column width="67%"}
-   Reshape to long format

```{r}
#| eval: false

asthmads_clean %>% 
  select(id, Weight_Post, Weight_Pre) %>% 
  pivot_longer(cols = starts_with("Weight"), 
               names_to = "Type", 
               values_to = "Weight", 
               names_pattern = "Weight_(.*)") %>% 
  mutate(Type = fct_relevel(Type, "Pre"))
```
:::

::: {.column width="2%"}
:::

::: {.column width="31%"}
```{r}
#| echo: false

asthmads_clean %>% 
  select(id, Weight_Post, Weight_Pre) %>% 
  pivot_longer(cols = starts_with("Weight"), 
               names_to = "Type", 
               values_to = "Weight", 
               names_pattern = "Weight_(.*)") %>% 
  mutate(Type = fct_relevel(Type, "Pre"))
```
:::
:::

## Demo: Paired t-test with `gtsummary`

**Demonstration only**

-   Then perform the test using the `tbl_summary` function

```{r}
#| eval: false
#| code-line-numbers: "8-13"

asthmads_clean %>% 
  select(id, Weight_Post, Weight_Pre) %>% 
  pivot_longer(cols = starts_with("Weight"), 
               names_to = "Type", 
               values_to = "Weight", 
               names_pattern = "Weight_(.*)") %>% 
  mutate(Type = fct_relevel(Type, "Pre")) %>% 
  tbl_summary(by = Type, 
              include = Weight, 
              statistic = all_continuous() ~ "{mean} ({sd})", 
              digits = all_continuous() ~ 2) %>% 
  add_difference(test = all_continuous() ~ "paired.t.test", 
                 group = id)
```

## Demo: Paired t-test with `gtsummary`

**Demonstration only**

```{r}
#| echo: false

asthmads_clean %>% 
  select(id, Weight_Post, Weight_Pre) %>% 
  pivot_longer(cols = starts_with("Weight"), 
               names_to = "Type", 
               values_to = "Weight", 
               names_pattern = "Weight_(.*)") %>% 
  mutate(Type = fct_relevel(Type, "Pre")) %>% 
  tbl_summary(by = Type, 
              include = Weight, 
              statistic = all_continuous() ~ "{mean} ({sd})", 
              digits = all_continuous() ~ 2) %>% 
  add_difference(test = all_continuous() ~ "paired.t.test", 
                 group = id)
```

# Analysis of Variance (ANOVA)

## Analysis of Variance (ANOVA)

-   Used to compare the means of three or more independent groups.
-   Note: we will focus on **One-Way ANOVA** only
-   The assumptions:
    -   The samples was taken **randomly** from the population.
    -   The independent variable consists of three or more categorical, **independent** groups.
    -   The dependent variable is **continuous**.
    -   The dependent variable should be **approximately normally distributed**.
    -   The **variances** of the groups should be **approximately equal**.

## Practical: One-Way ANOVA

-   Let's try to perform a One-Way ANOVA
-   e.g., compare the mean of PEFR improvement between the treatment groups
-   First, identify the related variables

```{r}
names(asthmads_clean)
```

## Practical: One-Way ANOVA

-   Let's try to perform a One-Way ANOVA
-   e.g., compare the mean of PEFR improvement between the treatment groups
    -   PEFR improvement: **PEFR_Diff**
    -   Treatment group: **Tx2**
-   `oneway.test` function for One-Way ANOVA

```{r}
oneway.test(PEFR_Diff ~ Tx2, asthmads_clean)
```

## `aov`, `oneway.test` and `anova` functions?

-   ANOVA is based on the F-test, which analyses the variance between groups and within groups.
-   The `aov` function is for one-way ANOVA, with the assumption of equal variance.
-   The `oneway.test` function is for one-way ANOVA, with the variance are not necessarily assumed to be equal.
    -   i.e., similar to Welch's t-test. 
-   The `anova` function is used differently while sharing the same name and purpose.
    -   The `anova` function is used to compare models with the F-test.

## Practical: One-Way ANOVA with `gtsummary`

-   Similarly, we can use the `add_p` function from the `gtsummary` package to perform the test.
    -   We need to specify the test, since the default is the Kruskal-Wallis Test.

```{r}
asthmads_clean %>% 
  tbl_summary(by = Tx2, 
              include = PEFR_Diff, 
              statistic = all_continuous() ~ "{mean} ({sd})") %>% 
  add_p(test = all_continuous() ~ "oneway.test")
```

# Pearson's Correlation

## Pearson's Correlation

-   Used to measure the strength and direction of the linear relationship between two continuous variables.
-   Assumptions:
    -   Each observation/measurement were **independent**.
    -   The two variables are **continuous**.
    -   The two variables should be **approximately normally distributed**.
    -   The relationship between the two variables is **linear**.
    -   The two variables should have **equal variances**.

## Practical: Pearson's Correlation

-   Let's try to perform a Pearson's Correlation
-   e.g., finding correlation between Height and Body Weight among the samples

```{r}
with(asthmads_clean, cor.test(Ht_m, Weight_Pre, method = "pearson"))
```

-   Note: Also accept formula as input.

```{r}
#| eval: false

cor.test(~ Ht_m + Weight_Pre, asthmads_clean, method = "pearson")
```


## Demo: Pearson's Correlation with `apaTables` package

```{r}
#| eval: false

library(apaTables)

asthmads_clean %>% 
  select(where(is.numeric)) %>% 
  select(-c(X, id)) %>% 
  apa.cor.table()
```

## Demo: Pearson's Correlation with `apaTables` package

```{r}
#| echo: false

library(apaTables)

asthmads_clean %>% 
  select(where(is.numeric)) %>% 
  select(-c(X, id)) %>% 
  apa.cor.table()
```

## Demo: Correlation Plot

```{r}
#| eval: false

library(corrplot)

asthmads_clean %>% 
  select(where(is.numeric)) %>% 
  select(-c(X, id)) %>% 
  cor() %>% 
  corrplot(type = "upper", order = "hclust", 
           tl.col = "black", tl.srt = 45)
```


## Demo: Correlation Plot

```{r}
#| echo: false

library(corrplot)

asthmads_clean %>% 
  select(where(is.numeric)) %>% 
  select(-c(X, id)) %>% 
  cor() %>% 
  corrplot(type = "upper", order = "hclust", 
           tl.col = "black", tl.srt = 45)
```

