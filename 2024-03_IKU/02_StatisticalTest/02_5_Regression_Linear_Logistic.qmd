---
title: "Statistical Tests in R: Regression"
subtitle: "Kursus R: Pengenalan dan Praktikal (Sesi 2)"
format: 
  clean-revealjs: 
    slide-number: true
    lightbox: true
    auto-stretch: false
    footer: "Linear Regression & Logistic"
author:
  - name: Mohd Azmi Bin Suliman
    orcid: 0000-0002-2125-3811
    email: azmi.suliman@moh.gov.my
    affiliations: Pusat Penyelidikan Penyakit Tak Berjangkit, Institut Kesihatan Umum
date: 2024-03-13
date-format: "dddd, DD MMMM YYYY"
embed-resources: true
execute: 
  echo: true
---

# Regression

-   Simple Linear Regression
-   Multiple Linear Regression
-   Simple Logistic Regression
-   Multiple Logistic Regression

```{r}
#| label: setup
#| echo: false

pacman::p_load(tidyverse, haven, gtsummary)
asthmads_clean <- read_sav("asthmads_clean.sav") %>% 
  as_factor()
```

```{css}
#| echo: false

code.sourceCode {
  font-size: 1.2em;
}
```

# Linear Regression

## Linear Regression

-   Use to model the relationship between a dependent (continuous) variable and one or more independent variable.
-   The formula is shown below
    -   $y$ is the dependent variable / outcome
    -   $x$ is the independent variable / predictor
    -   $\beta_0$ is the intercept (when $x$ = 0)
    -   $\beta_1$ is the slope (change in $y$ for a unit change in $x$)
    -   $\epsilon$ is the error term

$$y = \beta_0 + \beta_1x + \epsilon$$

## Linear Regression Assumptions

-   to provide reliable estimates, several key assumptions must be met
    -   Each observation/measurement were **independent**.
    -   The two variables are **continuous**.
    -   The two variables should be **approximately normally distributed**.
    -   The relationship between the two variables is **linear**.
    -   The two variables should have **equal variances**.
-   **Note**: *note the similarity between pearson correlation and linear regression*

# Practical: Linear Regression 

Finding factors associated with PEFR changes.

## Setup

-   Add a new level 1 and level 2 header
    -   `# Linear Regression`
    -   `## Simple Linear Regression`
-   Identify the variables
    -   Outcome (PEFR changes): `PEFR_Diff`

```{r}
names(asthmads_clean)
```

## Practical: Simple Linear Regression

-   Let's try to perform a simple linear regression
    -   Outcome: `PEFR_Diff`
    -   Predictor: `Age`

```{r}
#| eval: false

slinm <- lm(PEFR_Diff ~ Age, data = asthmads_clean)

summary(slinm)
```


## Practical: Simple Linear Regression


```{r}
slinm <- lm(PEFR_Diff ~ Age, data = asthmads_clean)

summary(slinm)
```

## Practical: Simple Linear Regression (Assumptions)

-   we can check assumptions using `plot` function

```{r}
#| eval: false

plot(slinm)
```


## Practical: Simple Linear Regression with `gtsummary`

-   We can use `tbl_uvregression` functions from `gtsummary` package.

```{r}
asthmads_clean %>% 
  tbl_uvregression(method = lm, 
                   y = PEFR_Diff, 
                   include = Age)
```



## Practical: Simple Linear Regression with `gtsummary`

-   We can add several predictors at the same time

```{r}
asthmads_clean %>% 
  tbl_uvregression(method = lm, 
                   y = PEFR_Diff, 
                   include = c(Age, Gender, Tx2))
```



## Practical: Simple Linear Regression with `gtsummary`

-   Adjust the parameter to make it prettier

```{r}
#| code-line-numbers: "5-8"
#| eval: false

asthmads_clean %>% 
  tbl_uvregression(method = lm, 
                   y = PEFR_Diff, 
                   include = c(Age, Gender, Tx2), 
                   pvalue_fun = partial(style_pvalue, 
                                        digits = 3),
                   add_estimate_to_reference_rows = T) %>% 
  bold_p()
```


## Practical: Simple Linear Regression with `gtsummary`

```{r}
#| code-line-numbers: "5-8"

asthmads_clean %>% 
  tbl_uvregression(method = lm, 
                   y = PEFR_Diff, 
                   include = c(Age, Gender, Tx2), 
                   pvalue_fun = partial(style_pvalue, 
                                        digits = 3),
                   add_estimate_to_reference_rows = T) %>% 
  bold_p()
```



## Multiple Linear Regression

-   Real-world relationships are often more complex.
-   Often the relationship influenced by third variables: confounders, mediators, moderators
-   Multiple linear regression can be used to model the relationship between a dependent variable and two or more independent variables.

## Practical: Multiple Linear Regression

-   Let's try to perform a multiple linear regression
    -   Outcome: `PEFR_Diff`
    -   Predictors: `Age`, `Gender` & `Tx2`

```{r}
names(asthmads_clean)
```


## Practical: Multiple Linear Regression

-   Let's try to perform a multiple linear regression
    -   Outcome: `PEFR_Diff`
    -   Predictors: `Age`, `Gender` & `Tx2`

```{r}
#| eval: false

mlinm <- lm(PEFR_Diff ~ Age + Gender + Tx2, data = asthmads_clean)

summary(mlinm)
```



## Practical: Multiple Linear Regression


```{r}
mlinm <- lm(PEFR_Diff ~ Age + Gender + Tx2, data = asthmads_clean)

summary(mlinm)
```

## Practical: Multiple Linear Regression with `gtsummary`

-   We can use `tbl_regression` functions from `gtsummary` package.
    -   We can either "pipe" it to the function

```{r}
lm(PEFR_Diff ~ Age + Gender + Tx2, data = asthmads_clean) %>% 
  tbl_regression()
```

## Practical: Multiple Linear Regression with `gtsummary`

-   We can use `tbl_regression` functions from `gtsummary` package.
    -   or we can use the function to the model object

```{r}
#| eval: false

tbl_regression(mlinm)
```



-   Same

```{r}
#| eval: false

mlinm %>% tbl_regression()
```


```{r}
#| echo: false

tbl_regression(mlinm)
```


## Practical: Multiple Linear Regression with `gtsummary`

-   Adjust the parameter accordingly

```{r}
#| code-line-numbers: "2-5"

lm(PEFR_Diff ~ Age + Gender + Tx2, data = asthmads_clean) %>% 
  tbl_regression(estimate_fun = partial(style_number, digits = 2), 
                 pvalue_fun = partial(style_pvalue,digits = 3), 
                 add_estimate_to_reference_rows = T) %>% 
  bold_p()
```



# Logistic Regression

## Logistic Regression

-   similar to linear regression - models the relationship between a dependent variable and one or more independent variables.
-   the logistic regression used when the outcome variable is binary in nature, with two poissible outcomes.
-   logistic regression estimates the **probabilities** of the binary outcome.


## Logistic Regression

-   the formula is
    -   $P$ is the probability of outcome
    -   $\frac{P}{1-P}$ is the odd of event occuring
    -   $\log\left(\frac{P}{1-P}\right)$ - the log odds or logit
    -   $X$ is the predictor
    -   $\beta_0$ is the y-intercept
    -   $\beta_1x$ is the slope of the line, representing the change of probability in y for one-unit change in  $X$
    
$$\log\left(\frac{P}{1-P}\right) = \beta_0 + \beta_1x + \epsilon$$ 

# Practical: Logistic Regression

Finding factors associated with PEFR Changes (Category)

-   Require data wrangling

## Practical: Logistic Regression

-   Let's try to perform logistic regression
-   Check the variables

```{r}
names(asthmads_clean)
```

-   noted that PEFR Changes (Categorical) not available.


## Practical: Logistic Regression (Setup)

-   A bit of setup, i.e., data wrangling required
-   Bin PEFR Changes `PEFR_Diff`
    -   divide into two, `Negligible` or `Improved`
    -   `Negligible`: `PEFR_Diff` < 40
    -   `Improved`: `PEFR_Diff` 40 and abobe
    -   name the new variable as `PEFR_DiffCat`
    -   save the dataset into new object (optional, you can also overwrite them.)


## Practical: Logistic Regression (Setup)

```{r}
asthmads_clean2 <- asthmads_clean %>% 
  mutate(PEFR_DiffCat = cut(PEFR_Diff, 
                            breaks = c(-Inf, 39.99, Inf), 
                            labels = c("Negligible", "Improved")), 
         PEFR_DiffCat = fct_relevel(PEFR_DiffCat, "Negligible"), 
         .after = PEFR_Diff)
```



## Practical: Simple Logistic Regression

-   Let's try to perform a simple logistic regression
    -   Outcome: `PEFR_DiffCat`
    -   Predictor: `Gender`

```{r}
#| eval: false

slogm <- glm(PEFR_DiffCat ~ Gender, 
             family = binomial, 
             data = asthmads_clean2)

summary(slogm)
```


## Practical: Simple Logistic Regression


```{r}
slogm <- glm(PEFR_DiffCat ~ Gender, 
             family = binomial, 
             data = asthmads_clean2)

summary(slogm)
```

## Practical: Simple Logistic Regression (Odd Ratio)

-   Logistic Regression model the relationship with the **log odds** of the outcome

```{r}
coef(slogm)
confint(slogm)
```

## Practical: Simple Logistic Regression (Odd Ratio)

-   To get the odd (and calculate the odd ratio) the value need to be exponentiated.
    -   using `exp` function

```{r}
exp(coef(slogm))
exp(confint(slogm))
```


## Practical: Simple Logistic Regression (Assumptions)

-   similarly, we can check assumptions using `plot` function

```{r}
#| eval: false

plot(slogm)
```


## Practical: Simple Logistic Regression with `gtsummary`

-   We can use `tbl_uvregression` functions from `gtsummary` package.

```{r}
asthmads_clean2 %>% 
  tbl_uvregression(method = glm, 
                   method.args = list(family = binomial),
                   y = PEFR_DiffCat, 
                   include = Gender)
```


## Practical: Simple Logistic Regression with `gtsummary`

-   We need to add parameter so that the value reported is odd ratio

```{r}
#| code-line-numbers: "6"

asthmads_clean2 %>% 
  tbl_uvregression(method = glm, 
                   method.args = list(family = binomial),
                   y = PEFR_DiffCat, 
                   include = Gender, 
                   exponentiate = T)
```



## Practical: Simple Logistic Regression with `gtsummary`

-   We can add several predictors at the same time

```{r}
#| code-line-numbers: "5"

asthmads_clean2 %>% 
  tbl_uvregression(method = glm, 
                   method.args = list(family = binomial),
                   y = PEFR_DiffCat, 
                   include = c(Gender, Age, Tx2), 
                   exponentiate = T)
```

## Practical: Simple Logistic Regression with `gtsummary`

-   Adjust the parameter to make it prettier


```{r}
#| code-line-numbers: "7-11"
#| eval: false

asthmads_clean2 %>% 
  tbl_uvregression(method = glm, 
                   method.args = list(family = binomial),
                   y = PEFR_DiffCat, 
                   include = c(Gender, Age, Tx2), 
                   exponentiate = T, 
                   pvalue_fun = partial(style_pvalue, 
                                        digits = 3),
                   add_estimate_to_reference_rows = T, 
                   hide_n = T) %>% 
  bold_p()
```




## Practical: Simple Logistic Regression with `gtsummary`

```{r}
#| echo: false

asthmads_clean2 %>% 
  tbl_uvregression(method = glm, 
                   method.args = list(family = binomial),
                   y = PEFR_DiffCat, 
                   include = c(Gender, Age, Tx2), 
                   exponentiate = T, 
                   pvalue_fun = partial(style_pvalue, 
                                        digits = 3),
                   add_estimate_to_reference_rows = T, 
                   hide_n = T) %>% 
  bold_p()
```


## Multiple Logistic Regression

-   Let's try to perform a multiple logistic regression
    -   Outcome: `PEFR_DiffCat`
    -   Predictors: `Age`, `Gender` & `Tx2`


```{r}
mlogm <- glm(PEFR_DiffCat ~ Age + Gender + Tx2, 
             family = binomial, data = asthmads_clean2)

summary(mlogm)
```

## Practical: Multiple Logistic Regression

-   similarly, we can extract the coefficient value and confidence interval


```{r}
coef(mlogm)
confint(mlogm)
```

## Practical: Multiple Logistic Regression

-   and calculate the odd ratio


```{r}
exp(coef(mlogm))
exp(confint(mlogm))
```



## Practical: Multiple Logistic Regression with `gtsummary`

-   We can use `tbl_regression` functions from `gtsummary` package.

```{r}
glm(PEFR_DiffCat ~ Age + Gender + Tx2, family = binomial, data = asthmads_clean2) %>% 
  tbl_regression()

```


## Practical: Multiple Logistic Regression with `gtsummary`

-   We can use `tbl_regression` functions from `gtsummary` package.
    -   Adjust the parameter accordingly

```{r}
#| code-line-numbers: "2-6"
#| eval: false

glm(PEFR_DiffCat ~ Age + Gender + Tx2, family = binomial, data = asthmads_clean2) %>% 
  tbl_regression(exponentiate = T, 
                 estimate_fun = partial(style_ratio, digits = 2), 
                 pvalue_fun = partial(style_pvalue,digits = 3), 
                 add_estimate_to_reference_rows = T) %>% 
  bold_p()

```


## Practical: Multiple Logistic Regression with `gtsummary`


```{r}
#| echo: false

glm(PEFR_DiffCat ~ Age + Gender + Tx2, family = binomial, data = asthmads_clean2) %>% 
  tbl_regression(exponentiate = T, 
                 estimate_fun = partial(style_ratio, digits = 2), 
                 pvalue_fun = partial(style_pvalue,digits = 3), 
                 add_estimate_to_reference_rows = T) %>% 
  bold_p()

```
