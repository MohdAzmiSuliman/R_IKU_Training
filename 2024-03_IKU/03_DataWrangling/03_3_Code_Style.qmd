---
title: "Data Wrangling: Code Style"
subtitle: "Kursus R: Pengenalan dan Praktikal (Sesi 3)"
format: 
  clean-revealjs: 
    slide-number: true
    lightbox: true
    auto-stretch: false
    footer: "Code Style"
author:
  - name: Mohd Azmi Bin Suliman
    orcid: 0000-0002-2125-3811
    email: azmi.suliman@moh.gov.my
    affiliations: Pusat Penyelidikan Penyakit Tak Berjangkit, Institut Kesihatan Umum
date: 2024-03-20
date-format: "dddd, DD MMMM YYYY"
embed-resources: true
execute: 
  echo: true
---

# Code Style

Source: R for Data Science (2e)

-   Link: <https://r4ds.hadley.nz/>

```{r}
#| echo: false

pacman::p_load(tidyverse, haven, summarytools, gtsummary)
```

```{css}
#| echo: false

code.sourceCode {
  font-size: 1.2em;
}
```


## Code Style

-   Good coding style is like correct punctuation
    -   you can manage without it,
    -   butitsuremakesthingseasiertoread.
-   Using consistent style make it easier fo other,
    -   especially **your future self**!
    -   to read and understand your code.
    

## Name and Naming Conventions

1.  Object names can only be start with letters, dot, or underscore.
    -   Can contain letters, numbers, dot, or underscore.
2.  There are several conventions for name with multiple words:
    -   snake_case: `my_variable_have_multiple_words`
    -   camelCase: `myVariableHaveMultipleWords`
    -   PascalCase: `MyVariableHaveMultipleWords`
    -   dot.case: `my.variable.have.multiple.words`
    -   kebab-case: `my-variable-have-multiple-words`


## Spaces

-   Use spaces to make your code more readable.
-   Use spaces around operators and after commas.

```{r}
#| eval: false

# Strive for
z <- (a + b)^2 / d

# Avoid
z<-( a + b ) ^ 2/d
```


## Spaces

-   Use spaces to make your code more readable.
-   Don't use spaces for function names and parentheses.

```{r}
#| eval: false

# Strive for
mean(x, na.rm = TRUE)

# Avoid
mean (x ,na.rm=TRUE)
```


## Pipes

-   Use pipes to make your code more readable.
-   `%>%` should always have a space before
-   should typically be the last thing on a line

```{r}
#| eval: false

# Strive for 
flights %>%  
  filter(!is.na(arr_delay), !is.na(tailnum)) %>% 
  count(dest)

# Avoid
flights%>%filter(!is.na(arr_delay), !is.na(tailnum))%>%count(dest)
```

